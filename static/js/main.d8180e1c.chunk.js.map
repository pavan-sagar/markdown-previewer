{"version":3,"sources":["redux/slices/updateContentSlice.js","redux/slices/maximiseWindowSlice.js","components/Editor.js","components/Previewer.js","App.js","serviceWorker.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["updateContentSlice","createSlice","name","initialState","content","reducers","updateContent","state","this","action","payload","updateContentReducer","reducer","actions","maximiseWindowSlice","editorIsMaximised","previewerIsMaximised","toggleWindowSize","windowName","windowIsMaximised","console","table","maximiseWindowReducer","Editor","props","editorContent","isMaximised","handleEditorContentChange","bind","handleWindowSizeToggle","text","__html","marked","sanitize","e","target","value","setState","conditionalStyles","maximisedWindowContainer","width","height","top","marginBottom","maximisedWindowXmark","marginLeft","expandCollapseIconClass","className","style","paddingTop","paddingRight","onClick","id","onChange","Component","connect","Previewer","breaks","expandedPreviewerClass","dangerouslySetInnerHTML","getMarkedDownText","data","App","Boolean","window","location","hostname","match","combineReducers","store","configureStore","rootReducer","document","title","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oWAEMA,EAAqBC,YAAY,CACnCC,KAAK,gBACLC,aAAc,CAAEC,QAAQ,IACxBC,SAAS,CACLC,cADK,WACyC,IAAhCC,EAA+B,uDAAzBC,KAAKL,aAAaM,EAAO,uCACzCF,EAAMH,QAAUK,EAAOC,QAAQN,YAM9BO,EAAuBX,EAAmBY,QACxCN,EAAkBN,EAAmBa,QAArCP,cCZTQ,EAAsBb,YAAY,CAEpCC,KAAK,iBAELC,aAAa,CACTY,mBAAkB,EAClBC,sBAAqB,GAGzBX,SAAS,CAELY,iBAFK,WAE4C,IAAhCV,EAA+B,uDAAzBC,KAAKL,aAAaM,EAAO,uCAEf,UAA7BA,EAAOC,QAAQQ,WACXX,EAAMQ,kBAAoBN,EAAOC,QAAQS,kBAC7CZ,EAAMS,qBAAuBP,EAAOC,QAAQS,kBAE5CC,QAAQC,MAAMd,EAAMQ,kBAAkBR,EAAMS,0BAK3CM,EAAyBR,EAAoBF,QAC3CK,EAAqBH,EAAoBD,QAAzCI,iB,wBClBFM,EAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDjB,MAAQ,CACXkB,cAAe,KACfC,aAAa,GAGf,EAAKC,0BAA4B,EAAKA,0BAA0BC,KAA/B,gBACjC,EAAKC,uBAAyB,EAAKA,uBAAuBD,KAA5B,gBATb,EADrB,8DAaoBE,GAEhB,MAAO,CAAEC,OADOC,IAAOF,EAAM,CAAEG,UAAU,OAd7C,gDAkB4BC,GACxB1B,KAAKgB,MAAMlB,cAAc,CAAEF,QAAS8B,EAAEC,OAAOC,UAnBjD,+CA0BI5B,KAAKgB,MAAMP,iBAAiB,CAC1BC,WAAY,SACZC,mBAAoBX,KAAKD,MAAMmB,cAGjClB,KAAK6B,SAAS,CAAEX,aAAclB,KAAKD,MAAMmB,gBA/B7C,+BAmCI,IAAIY,EAAoB,CACtBC,yBAA0B,CACxBC,MAAO,OACPC,OAAQ,OACRC,IAAK,OACLC,aAAc,KAEhBC,qBAAsB,CACpBC,WAAY,QAIZC,EAA0BtC,KAAKD,MAAMmB,YACrC,cACA,gBAGJ,OACE,yBACEqB,UAAU,mBACVC,MACExC,KAAKD,MAAMmB,YACPY,EAAiB,yBACjB,IAGN,uBAAGS,UAAU,wBACX,uBACEA,UAAU,uBACVC,MAAO,CACLC,WAAY,UACZJ,WAAY,UACZK,aAAc,YANpB,SAUE,uBACEH,UAAS,aAAQD,GACjBE,MACExC,KAAKD,MAAMmB,YACPY,EAAiB,qBACjB,GAENa,QAAS3C,KAAKqB,0BAGlB,8BAAUuB,GAAG,WAAWC,SAAU7C,KAAKmB,iCAjF/C,GAA4B2B,aAuFbC,cAAQ,KAAM,CAAEjD,gBAAeW,oBAA/BsC,CAAmDhC,GCxFrDiC,G,MAAb,kDACE,WAAYhC,GAAQ,IAAD,8BACjB,cAAMA,IAEDjB,MAAQ,CACXmB,aAAa,GAGf,EAAKG,uBAAyB,EAAKA,uBAAuBD,KAA5B,gBAPb,EADrB,8DAWoBE,GAGhB,MAAO,CAAEC,OAFOC,IAAOF,EAAM,CAAEG,UAAU,EAAMwB,QAAQ,OAZ3D,+CAkBIjD,KAAKgB,MAAMP,iBAAiB,CAC1BC,WAAY,YACZC,mBAAoBX,KAAKD,MAAMmB,cAGjClB,KAAK6B,SAAS,CAAEX,aAAclB,KAAKD,MAAMmB,gBAvB7C,+BA2BI,IAUIoB,EAA0BtC,KAAKD,MAAMmB,YACrC,cACA,gBAEAgC,EAAyBlD,KAAKD,MAAMmB,YACpC,gCACA,GAEJ,OACE,yBACEqB,UAAS,8BAAyBW,IAGlC,uBAAGX,UAAU,2BACX,uBACEA,UAAU,uBACVC,MAAO,CACLC,WAAY,UACZJ,WAAY,UACZK,aAAc,YANpB,YAUE,uBACEH,UAAS,aAAQD,GACjBE,MACExC,KAAKD,MAAMmB,YA/BG,CACpBmB,WAAY,SAgCF,GAENM,QAAS3C,KAAKqB,0BAIlB,yBACEkB,UAAU,oBACVY,wBAAyBnD,KAAKoD,kBAAkBpD,KAAKgB,MAAMqC,aAzErE,GAA+BP,cAgFhBC,cAAQ,KAAM,CAAEtC,oBAAhBsC,CAAoCC,GChF7CM,E,kDACJ,WAAYtC,GAAQ,IAAD,8BACjB,cAAMA,IAEDjB,MAAQ,CACXH,QAAS,IAJM,E,qDAUjB,OACE,yBAAK2C,UAAU,oBACXvC,KAAKgB,MAAMR,sBAAwB,kBAAC,EAAD,CAAQoC,GAAG,sBAC9C5C,KAAKgB,MAAMT,mBACX,kBAAC,EAAD,CAAW8C,KAAMrD,KAAKgB,MAAMpB,e,GAfpBkD,aA8BHC,eARS,SAAChD,GACvB,MAAO,CACLH,QAASG,EAAMI,qBAAqBP,QACpCW,kBAAmBR,EAAMe,sBAAsBP,kBAC/CC,qBAAsBT,EAAMe,sBAAsBN,wBAId,KAAzBuC,CAA+BO,GCxB1BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iBCbSC,cAAgB,CAC3BzD,qBAAuBA,EACvBW,sBAAwBA,ICJf+C,EAAQC,YAAe,CAAC1D,QAAQ2D,I,MCS7CC,SAASC,MAAQ,qBAEjBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,EAAD,QAGJG,SAASK,eAAe,SH+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjE,QAAQiE,MAAMA,EAAMC,c","file":"static/js/main.d8180e1c.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst updateContentSlice = createSlice({\r\n    name:'updateContent',\r\n    initialState: { content:''},\r\n    reducers:{\r\n        updateContent(state=this.initialState,action){\r\n            state.content = action.payload.content;\r\n            \r\n        }\r\n    }\r\n});\r\n\r\nexport const updateContentReducer = updateContentSlice.reducer;\r\nexport const { updateContent } = updateContentSlice.actions;","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst maximiseWindowSlice = createSlice({\r\n\r\n    name:'maximiseWindow',\r\n\r\n    initialState:{\r\n        editorIsMaximised:false,\r\n        previewerIsMaximised:false,\r\n    },\r\n\r\n    reducers:{\r\n\r\n        toggleWindowSize(state=this.initialState,action){\r\n            \r\n            action.payload.windowName == 'editor' ? \r\n                state.editorIsMaximised = action.payload.windowIsMaximised :\r\n            state.previewerIsMaximised = action.payload.windowIsMaximised;\r\n\r\n            console.table(state.editorIsMaximised,state.previewerIsMaximised);\r\n        }\r\n    }\r\n});\r\n\r\nexport const maximiseWindowReducer =  maximiseWindowSlice.reducer;\r\nexport const { toggleWindowSize } = maximiseWindowSlice.actions;","import React, { Component } from \"react\";\r\nimport \"../styles/Editor.css\";\r\nimport { updateContent } from \"../redux/slices/updateContentSlice\";\r\nimport { toggleWindowSize } from \"../redux/slices/maximiseWindowSlice\";\r\nimport { connect } from \"react-redux\";\r\nimport marked from \"marked\";\r\n\r\nexport class Editor extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      editorContent: null,\r\n      isMaximised: false,\r\n    };\r\n\r\n    this.handleEditorContentChange = this.handleEditorContentChange.bind(this);\r\n    this.handleWindowSizeToggle = this.handleWindowSizeToggle.bind(this);\r\n  }\r\n\r\n  getMarkedDownText(text) {\r\n    let rawMarkUp = marked(text, { sanitize: true });\r\n    return { __html: rawMarkUp };\r\n  }\r\n\r\n  handleEditorContentChange(e) {\r\n    this.props.updateContent({ content: e.target.value });\r\n  }\r\n\r\n  handleWindowSizeToggle() {\r\n    // console.log(`toggled state is ${this.state.isMaximised}`)\r\n\r\n    // console.table(this.state);\r\n    this.props.toggleWindowSize({\r\n      windowName: \"editor\",\r\n      windowIsMaximised: !this.state.isMaximised,\r\n    });\r\n\r\n    this.setState({ isMaximised: !this.state.isMaximised });\r\n  }\r\n\r\n  render() {\r\n    let conditionalStyles = {\r\n      maximisedWindowContainer: {\r\n        width: \"90vw\",\r\n        height: \"90vh\",\r\n        top: \"2rem\",\r\n        marginBottom: \"0\",\r\n      },\r\n      maximisedWindowXmark: {\r\n        marginLeft: \"95%\",\r\n      },\r\n    };\r\n\r\n    let expandCollapseIconClass = this.state.isMaximised\r\n      ? \"fa-compress\"\r\n      : \"fa-arrows-alt\";\r\n    \r\n    \r\n    return (\r\n      <div\r\n        className=\"editor-container\"\r\n        style={\r\n          this.state.isMaximised\r\n            ? conditionalStyles[\"maximisedWindowContainer\"]\r\n            : {}\r\n        }\r\n      >\r\n        <p className=\"editor-window-header\">\r\n          <i\r\n            className=\"fa fa-free-code-camp\"\r\n            style={{\r\n              paddingTop: \"0.25rem\",\r\n              marginLeft: \"-0.5rem\",\r\n              paddingRight: \"0.3rem\",\r\n            }}\r\n          />\r\n          Editor\r\n          <i\r\n            className={`fa ${expandCollapseIconClass}`}\r\n            style={\r\n              this.state.isMaximised\r\n                ? conditionalStyles[\"maximisedWindowXmark\"]\r\n                : {}\r\n            }\r\n            onClick={this.handleWindowSizeToggle}\r\n          ></i>\r\n        </p>\r\n        <textarea id=\"text-pad\" onChange={this.handleEditorContentChange} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { updateContent, toggleWindowSize })(Editor);\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/Previewer.css\";\r\nimport marked from \"marked\";\r\nimport { toggleWindowSize } from \"../redux/slices/maximiseWindowSlice\";\r\nimport { connect } from \"react-redux\";\r\n\r\nexport class Previewer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isMaximised: false,\r\n    };\r\n\r\n    this.handleWindowSizeToggle = this.handleWindowSizeToggle.bind(this);\r\n  }\r\n\r\n  getMarkedDownText(text) {\r\n    let rawMarkUp = marked(text, { sanitize: true, breaks: true });\r\n\r\n    return { __html: rawMarkUp };\r\n  }\r\n\r\n  handleWindowSizeToggle() {\r\n    this.props.toggleWindowSize({\r\n      windowName: \"previewer\",\r\n      windowIsMaximised: !this.state.isMaximised,\r\n    });\r\n\r\n    this.setState({ isMaximised: !this.state.isMaximised });\r\n  }\r\n\r\n  render() {\r\n    let conditionalStyles = {\r\n      maximisedWindowContainer: {\r\n        width: \"90%\",\r\n        height: \"90vh\",\r\n      },\r\n      maximisedWindowXmark: {\r\n        marginLeft: \"93.7%\",\r\n      },\r\n    };\r\n\r\n    let expandCollapseIconClass = this.state.isMaximised\r\n      ? \"fa-compress\"\r\n      : \"fa-arrows-alt\";\r\n\r\n    let expandedPreviewerClass = this.state.isMaximised\r\n      ? \"previewer-container-maximised\"\r\n      : \"\";\r\n\r\n    return (\r\n      <div\r\n        className={`previewer-container ${expandedPreviewerClass}`}\r\n        \r\n      >\r\n        <p className=\"previewer-window-header\">\r\n          <i\r\n            className=\"fa fa-free-code-camp\"\r\n            style={{\r\n              paddingTop: \"0.25rem\",\r\n              marginLeft: \"-0.5rem\",\r\n              paddingRight: \"0.3rem\",\r\n            }}\r\n          />\r\n          Previewer\r\n          <i\r\n            className={`fa ${expandCollapseIconClass}`}\r\n            style={\r\n              this.state.isMaximised\r\n                ? conditionalStyles[\"maximisedWindowXmark\"]\r\n                : {}\r\n            }\r\n            onClick={this.handleWindowSizeToggle}\r\n          />\r\n        </p>\r\n\r\n        <div\r\n          className=\"previewer-content\"\r\n          dangerouslySetInnerHTML={this.getMarkedDownText(this.props.data)}\r\n        ></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { toggleWindowSize })(Previewer);\r\n","import React, { Component } from \"react\";\nimport \"./styles/App.css\";\nimport Editor from \"./components/Editor\";\nimport Previewer from \"./components/Previewer\";\nimport { connect } from \"react-redux\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      content: \"\",\n    };\n  }\n\n  //Rendering\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        {!this.props.previewerIsMaximised && <Editor id=\"editor-component\" />}\n        {!this.props.editorIsMaximised && (\n          <Previewer data={this.props.content} />\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    content: state.updateContentReducer.content,\n    editorIsMaximised: state.maximiseWindowReducer.editorIsMaximised,\n    previewerIsMaximised: state.maximiseWindowReducer.previewerIsMaximised,\n  };\n};\n\nexport default connect(mapStateToProps, null)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux'\r\nimport { updateContentReducer } from './slices/updateContentSlice'\r\nimport { maximiseWindowReducer } from './slices/maximiseWindowSlice'\r\n\r\n\r\nexport default combineReducers({\r\n    updateContentReducer : updateContentReducer,\r\n    maximiseWindowReducer : maximiseWindowReducer,\r\n});","import rootReducer from './rootReducer'\r\nimport { configureStore } from '@reduxjs/toolkit'\r\n\r\nexport const store = configureStore({reducer:rootReducer})","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\nimport 'font-awesome/css/font-awesome.min.css'\n\n// Change title of the page\n\ndocument.title = 'Markdown Previewer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}