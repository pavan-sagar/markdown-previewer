{"version":3,"sources":["redux/slices/updateContentSlice.js","redux/slices/maximiseWindowSlice.js","components/Editor.js","components/Previewer.js","App.js","serviceWorker.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["updateContentSlice","createSlice","name","initialState","content","reducers","updateContent","state","this","action","payload","updateContentReducer","reducer","actions","maximiseWindowSlice","editorIsMaximised","previewerIsMaximised","toggleWindowSize","windowName","windowIsMaximised","console","table","maximiseWindowReducer","Editor","props","editorContent","isMaximised","handleEditorContentChange","bind","handleWindowSizeToggle","text","__html","marked","sanitize","e","target","value","setState","expandCollapseIconClass","className","style","paddingTop","marginLeft","paddingRight","onClick","id","onChange","Component","connect","Previewer","breaks","expandedPreviewerClass","dangerouslySetInnerHTML","getMarkedDownText","data","App","Boolean","window","location","hostname","match","combineReducers","store","configureStore","rootReducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0dcdfca8.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst updateContentSlice = createSlice({\r\n  name: \"updateContent\",\r\n  initialState: {\r\n    content: `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n          \r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n        \r\n\\`\\`\\`\r\n// this is multi-line code:\r\n        \r\nfunction anotherExample(firstLine, lastLine) {\r\n   if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n     return multiLineCode;\r\n   }\r\n }\r\n\\`\\`\\`\r\n  \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n`,\r\n  },\r\n  reducers: {\r\n    updateContent(state = this.initialState, action) {\r\n      state.content = action.payload.content;\r\n    },\r\n  },\r\n});\r\n\r\nexport const updateContentReducer = updateContentSlice.reducer;\r\nexport const { updateContent } = updateContentSlice.actions;\r\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst maximiseWindowSlice = createSlice({\r\n\r\n    name:'maximiseWindow',\r\n\r\n    initialState:{\r\n        editorIsMaximised:false,\r\n        previewerIsMaximised:false,\r\n    },\r\n\r\n    reducers:{\r\n\r\n        toggleWindowSize(state=this.initialState,action){\r\n            \r\n            action.payload.windowName == 'editor' ? \r\n                state.editorIsMaximised = action.payload.windowIsMaximised :\r\n            state.previewerIsMaximised = action.payload.windowIsMaximised;\r\n\r\n            console.table(state.editorIsMaximised,state.previewerIsMaximised);\r\n        }\r\n    }\r\n});\r\n\r\nexport const maximiseWindowReducer =  maximiseWindowSlice.reducer;\r\nexport const { toggleWindowSize } = maximiseWindowSlice.actions;","import React, { Component } from \"react\";\r\nimport \"../styles/Editor.css\";\r\nimport { updateContent } from \"../redux/slices/updateContentSlice\";\r\nimport { toggleWindowSize } from \"../redux/slices/maximiseWindowSlice\";\r\nimport { connect } from \"react-redux\";\r\nimport marked from \"marked\";\r\n\r\nexport class Editor extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      editorContent: `# Welcome to my React Markdown Previewer!\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n          \r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n        \r\n\\`\\`\\`\r\n// this is multi-line code:\r\n        \r\nfunction anotherExample(firstLine, lastLine) {\r\n   if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n     return multiLineCode;\r\n   }\r\n }\r\n\\`\\`\\`\r\n  \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n`,\r\n      isMaximised: false,\r\n    };\r\n\r\n    this.handleEditorContentChange = this.handleEditorContentChange.bind(this);\r\n    this.handleWindowSizeToggle = this.handleWindowSizeToggle.bind(this);\r\n  }\r\n\r\n  getMarkedDownText(text) {\r\n    let rawMarkUp = marked(text, { sanitize: true });\r\n    return { __html: rawMarkUp };\r\n  }\r\n\r\n  // Updating the redux store with latest input from user\r\n  handleEditorContentChange(e) {\r\n    this.props.updateContent({ content: e.target.value });\r\n    this.setState({ editorContent: e.target.value });\r\n  }\r\n\r\n  handleWindowSizeToggle() {\r\n    this.props.toggleWindowSize({\r\n      windowName: \"editor\",\r\n      windowIsMaximised: !this.state.isMaximised,\r\n    });\r\n\r\n    this.setState({ isMaximised: !this.state.isMaximised });\r\n  }\r\n\r\n  render() {\r\n    // CSS styles for the maximised window\r\n\r\n    let conditionalStyles = {\r\n      maximisedWindowContainer: {\r\n        width: \"90vw\",\r\n        height: \"90vh\",\r\n        top: \"2rem\",\r\n        marginBottom: \"3.1rem\",\r\n      },\r\n      maximisedWindowXmark: {\r\n        marginLeft: \"95%\",\r\n      },\r\n    };\r\n\r\n    // Change the expand/collapse icon by updating class onClick\r\n\r\n    let expandCollapseIconClass = this.state.isMaximised\r\n      ? \"fa-compress\"\r\n      : \"fa-arrows-alt\";\r\n\r\n    return (\r\n      <div\r\n        className={`editor-container ${this.state.isMaximised ? \"editor-container-maximised\" : ''}`}\r\n        // style={\r\n        //   this.state.isMaximised\r\n        //     ? conditionalStyles[\"maximisedWindowContainer\"]\r\n        //     : {}\r\n        // }\r\n      >\r\n        <p className=\"editor-window-header\">\r\n          <i\r\n            className=\"fa fa-free-code-camp\"\r\n            style={{\r\n              paddingTop: \"0.25rem\",\r\n              marginLeft: \"-0.5rem\",\r\n              paddingRight: \"0.3rem\",\r\n            }}\r\n          />\r\n          Editor\r\n          <i\r\n            className={`fa ${expandCollapseIconClass}`}\r\n           \r\n            onClick={this.handleWindowSizeToggle}\r\n          ></i>\r\n        </p>\r\n        <textarea id=\"editor\" onChange={this.handleEditorContentChange}>\r\n          {this.state.editorContent}\r\n        </textarea>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { updateContent, toggleWindowSize })(Editor);\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/Previewer.css\";\r\nimport marked from \"marked\";\r\nimport { toggleWindowSize } from \"../redux/slices/maximiseWindowSlice\";\r\nimport { connect } from \"react-redux\";\r\n\r\nexport class Previewer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isMaximised: false,\r\n    };\r\n\r\n    this.handleWindowSizeToggle = this.handleWindowSizeToggle.bind(this);\r\n  }\r\n\r\n  getMarkedDownText(text) {\r\n    let rawMarkUp = marked(text, { sanitize: true, breaks: true });\r\n\r\n    return { __html: rawMarkUp };\r\n  }\r\n\r\n  handleWindowSizeToggle() {\r\n    // We update the redux store that Previewer window size is toggled\r\n\r\n    this.props.toggleWindowSize({\r\n      windowName: \"previewer\",\r\n      windowIsMaximised: !this.state.isMaximised,\r\n    });\r\n\r\n    this.setState({ isMaximised: !this.state.isMaximised });\r\n  }\r\n\r\n  render() {\r\n    // CSS styles for the maximised window\r\n    let conditionalStyles = {\r\n      maximisedWindowContainer: {\r\n        width: \"90%\",\r\n        height: \"90vh\",\r\n      },\r\n      maximisedWindowXmark: {\r\n        marginLeft: \"93.7%\",\r\n      },\r\n    };\r\n\r\n    // Change the expand/collapse icon by updating class onClick\r\n    let expandCollapseIconClass = this.state.isMaximised\r\n      ? \"fa-compress\"\r\n      : \"fa-arrows-alt\";\r\n\r\n    let expandedPreviewerClass = this.state.isMaximised\r\n      ? \"previewer-container-maximised\"\r\n      : \"\";\r\n\r\n    return (\r\n      <div className={`previewer-container ${expandedPreviewerClass}`}>\r\n        <p className=\"previewer-window-header\">\r\n          <i\r\n            className=\"fa fa-free-code-camp\"\r\n            style={{\r\n              paddingTop: \"0.25rem\",\r\n              marginLeft: \"-0.5rem\",\r\n              paddingRight: \"0.3rem\",\r\n            }}\r\n          />\r\n          Previewer\r\n          <i\r\n            className={`fa ${expandCollapseIconClass}`}\r\n            \r\n            onClick={this.handleWindowSizeToggle}\r\n          />\r\n        </p>\r\n\r\n        {/* The Previewer window that displayed the marked down text with format */}\r\n        <div\r\n          id=\"preview\"\r\n          className=\"previewer-content\"\r\n          dangerouslySetInnerHTML={this.getMarkedDownText(this.props.data)}\r\n        ></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { toggleWindowSize })(Previewer);\r\n","import React, { Component } from \"react\";\r\nimport \"./styles/App.css\";\r\nimport Editor from \"./components/Editor\";\r\nimport Previewer from \"./components/Previewer\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      content: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      //  We hide the window when another window is maximised.\r\n      // By default both windows are set to 'minimised/false' and so both the windows are visible initially.\r\n      <div className=\"my-container\">\r\n        {!this.props.previewerIsMaximised && <Editor id=\"editor-component\" />}\r\n        {!this.props.editorIsMaximised && (\r\n          <Previewer data={this.props.content} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Subscribing to redux store content and saving it as local props\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    content: state.updateContentReducer.content,\r\n    editorIsMaximised: state.maximiseWindowReducer.editorIsMaximised,\r\n    previewerIsMaximised: state.maximiseWindowReducer.previewerIsMaximised,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux'\r\nimport { updateContentReducer } from './slices/updateContentSlice'\r\nimport { maximiseWindowReducer } from './slices/maximiseWindowSlice'\r\n\r\n\r\nexport default combineReducers({\r\n    updateContentReducer : updateContentReducer,\r\n    maximiseWindowReducer : maximiseWindowReducer,\r\n});","import rootReducer from './rootReducer'\r\nimport { configureStore } from '@reduxjs/toolkit'\r\n\r\nexport const store = configureStore({reducer:rootReducer})","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\n// Change title of the page\n\n// document.title = \"Markdown Previewer\";\n\n// //FCC test validation script\n// var FCCValidationScript = document.createElement('script');  \n// FCCValidationScript.setAttribute('src','https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js');\n// document.head.appendChild(FCCValidationScript);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}